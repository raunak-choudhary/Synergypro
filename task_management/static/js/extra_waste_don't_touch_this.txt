
showOtpModal(type) {
    console.log("Showing OTP modal for type:", type);
    console.log("Modal element:", this.modal);
    console.log("Modal title:", this.modalTitle);
    console.log("OTP destination:", this.otpDestination);

    // Check if already verified
    if ((type === 'email' && this.isEmailVerified) || 
        (type === 'mobile' && this.isMobileVerified)) {
        this.showSuccess(`${type === 'email' ? 'Email' : 'Mobile'} already verified!`);
        return;
    }

    // Reset transaction state
    this.currentTransaction = {
        type: type,
        hasUsedResend: false,
        timerInterval: null
    };

    this.modal.style.display = 'flex';
    document.body.classList.add('modal-open');
    
    // Clear previous inputs
    this.otpInputs.forEach(input => input.value = '');
    this.otpInputs[0].focus();

    // Update modal content based on verification type
    if (type === 'email') {
        const email = document.querySelector('input[type="email"]').value;
        this.otpDestination.textContent = email;
    } else {
        const phone = document.querySelector('input[type="tel"]').value;
        this.otpDestination.textContent = phone;
    }

    // Reset and start timer
    this.resetAndStartTimer();
}






validateOTP() {
        const otp = Array.from(this.otpInputs)
            .map(input => input.value)
            .join('');
    
        if (otp.length !== 6) {
            this.showError('Please enter complete OTP');
            return;
        }
    
        // Set verification status
        if (this.currentTransaction.type === 'email') {
            this.isEmailVerified = true;
            const emailContainer = document.getElementById('email-verification-container');
            if (emailContainer) {
                emailContainer.querySelector('input[type="email"]').dataset.verified = 'true';
                emailContainer.innerHTML = `
                    <input type="email" name="email" value="${emailContainer.querySelector('input').value}" data-verified="true" />
                    <div class="verification-status success">✓ Email Verified</div>
                `;
            }
        } else {
            this.isMobileVerified = true;
            const mobileContainer = document.getElementById('mobile-verification-container');
            if (mobileContainer) {
                mobileContainer.querySelector('input[type="tel"]').dataset.verified = 'true';
                mobileContainer.innerHTML = `
                    <input type="tel" name="phone" value="${mobileContainer.querySelector('input').value}" data-verified="true" />
                    <div class="verification-status success">✓ Mobile Verified</div>
                `;
            }
        }

        // Ensure other verification button remains if not verified
        this.updateMixedState();
        this.updateVerificationUI();
    
        // Show success message and close modal
        this.showSuccess('Verification successful!');
        setTimeout(() => {
            this.hideModal();
            // Force UI refresh after modal closes
            setTimeout(() => this.updateVerificationUI(), 100);
        }, 1500);
    }



showOtpModal(type) {
        console.log("Showing OTP modal for type:", type);
        console.log("Modal element:", this.modal);
        console.log("Modal title:", this.modalTitle);
        console.log("OTP destination:", this.otpDestination);
        
        if (!this.modal) {
            console.error("Modal element not found!");
            return;
        }
    
        this.currentTransaction = {
            type: type,
            hasUsedResend: false,
            timerInterval: null
        };
    
        this.modal.style.display = 'flex';
        document.body.classList.add('modal-open');
        
        // Clear previous inputs
        if (this.otpInputs.length > 0) {
            this.otpInputs.forEach(input => input.value = '');
            this.otpInputs[0].focus();
        } else {
            console.error("OTP inputs not found!");
        }
    
        // Update modal content
        try {
            if (type === 'email') {
                const emailInput = document.querySelector('input[type="email"]');
                console.log("Found email input:", emailInput);
                if (emailInput) {
                    this.otpDestination.textContent = emailInput.value;
                }
            } else {
                const phoneInput = document.querySelector('input[type="tel"]');
                console.log("Found phone input:", phoneInput);
                if (phoneInput) {
                    this.otpDestination.textContent = phoneInput.value;
                }
            }
        } catch (error) {
            console.error("Error updating destination:", error);
        }
    }